<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %> - SafetySync Pro</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        body {
            background-color: #f8f9fa;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        .navbar {
            background: linear-gradient(45deg, #343a40, #495057) !important;
            box-shadow: 0 2px 4px rgba(0,0,0,.1);
        }
        
        .navbar-brand {
            font-weight: bold;
            color: white !important;
        }
        
        .dashboard-card {
            border: none;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            background: white;
        }
        
        .dashboard-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 15px rgba(0, 0, 0, 0.2);
        }
        
        .bg-gradient-primary {
            background: linear-gradient(45deg, #007bff, #0056b3);
        }
        
        .bg-gradient-success {
            background: linear-gradient(45deg, #28a745, #20c997);
        }
        
        .bg-gradient-info {
            background: linear-gradient(45deg, #17a2b8, #138496);
        }
        
        .bg-gradient-warning {
            background: linear-gradient(45deg, #ffc107, #e0a800);
        }
        
        .stats-card {
            border-radius: 15px;
            padding: 1.5rem;
            color: white;
            text-align: center;
            margin-bottom: 2rem;
        }
        
        .category-card {
            margin-bottom: 1.5rem;
            border-left: 4px solid #007bff;
        }
        
        .category-header {
            background: linear-gradient(45deg, #f8f9fa, #e9ecef);
            border-radius: 8px 8px 0 0;
            padding: 1rem;
            border-bottom: 1px solid #dee2e6;
        }
        
        .document-item {
            padding: 1rem;
            margin-bottom: 0.75rem;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            transition: all 0.2s ease;
        }
        
        .document-item:hover {
            background-color: #f8f9fa;
            border-color: #dee2e6;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }
        
        .badge-status {
            font-size: 0.7rem;
            padding: 0.3rem 0.6rem;
            font-weight: 500;
        }
        
        .btn-modern {
            border-radius: 8px;
            padding: 0.5rem 1rem;
            font-weight: 500;
            transition: all 0.3s ease;
        }
        
        .btn-modern:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        }
        
        .progress-modern {
            height: 8px;
            border-radius: 4px;
            background-color: #e9ecef;
        }
        
        .progress-bar-modern {
            border-radius: 4px;
            transition: width 0.6s ease;
        }
        
        .main-content {
            padding: 2rem 0;
        }
        
        .page-header {
            margin-bottom: 2rem;
            text-align: center;
        }
        
        .page-title {
            color: #343a40;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }
        
        .page-subtitle {
            color: #6c757d;
            font-size: 1.1rem;
        }

        .learning-indicator {
            font-size: 0.65rem;
            font-weight: 500;
            padding: 0.15rem 0.4rem;
            border-radius: 0.25rem;
            white-space: nowrap;
        }
        
        .learning-indicator.ai-linked {
            background: #d4edda;
            color: #155724;
        }
        
        .learning-indicator.manual-linked {
            background: #cce7ff;
            color: #004085;
        }
        
        .learning-indicator.pattern-match {
            background: #fff3cd;
            color: #856404;
        }

        .btn-group-sm > .btn {
            padding: 0.25rem 0.5rem;
            font-size: 0.8rem;
            line-height: 1.2;
        }

        .btn-group-sm > .btn i {
            font-size: 0.75rem;
        }

        .document-item .text-muted.small {
            font-size: 0.75rem;
            line-height: 1.3;
        }

        @media (max-width: 768px) {
            .document-item {
                padding: 0.75rem;
            }
            
            .document-item .d-flex {
                flex-direction: column;
                align-items: flex-start !important;
                gap: 0.5rem;
            }
            
            .btn-group {
                margin-top: 0.5rem;
            }
        }

        @keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
    </style>
</head>
<body>
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-dark">
        <div class="container">
            <a class="navbar-brand" href="/">
                <i class="fas fa-shield-alt me-2"></i>SafetySync Pro
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="/">Dashboard</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link active" href="/ims-index">IMS Index</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/isn-index">ISN Index</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/documents">Documents</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/reports">Reports</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <div class="container main-content">
        <!-- Page Header -->
        <div class="page-header">
            <h1 class="page-title">
                <i class="fas fa-file-alt me-2"></i>IMS Document Index
            </h1>
            <p class="page-subtitle">Integrated Management System Document Categories and Status</p>
        </div>

        <!-- Statistics Cards -->
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="stats-card bg-gradient-primary">
                    <div class="d-flex align-items-center justify-content-between">
                        <div>
                            <h3 class="mb-0"><%= stats.totalCategories || 0 %></h3>
                            <p class="mb-0">Categories</p>
                        </div>
                        <i class="fas fa-folder-open fa-2x opacity-75"></i>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="stats-card bg-gradient-success">
                    <div class="d-flex align-items-center justify-content-between">
                        <div>
                            <h3 class="mb-0"><%= stats.totalDocuments || 0 %></h3>
                            <p class="mb-0">Total Documents</p>
                        </div>
                        <i class="fas fa-file-alt fa-2x opacity-75"></i>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="stats-card bg-gradient-info">
                    <div class="d-flex align-items-center justify-content-between">
                        <div>
                            <h3 class="mb-0"><%= stats.linkedDocuments || 0 %></h3>
                            <p class="mb-0">Linked Documents</p>
                        </div>
                        <i class="fas fa-link fa-2x opacity-75"></i>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="stats-card bg-gradient-warning">
                    <div class="d-flex align-items-center justify-content-between">
                        <div>
                            <h3 class="mb-0"><%= stats.completionRate || 0 %>%</h3>
                            <p class="mb-0">Completion Rate</p>
                        </div>
                        <i class="fas fa-chart-pie fa-2x opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>

        <!-- Progress Bar -->
        <div class="dashboard-card p-3 mb-4">
            <div class="d-flex justify-content-between align-items-center mb-2">
                <h6 class="mb-0">Overall Progress</h6>
                <small class="text-muted"><%= (stats && stats.linkedDocuments) || 0 %>/<%= (stats && stats.totalDocuments) || 0 %> documents linked</small>
        </div>
        <div class="progress progress-modern">
            <div class="progress-bar progress-bar-modern bg-success" style="width: <%= (stats && stats.completionRate) || 0 %>%"></div>
         </div>
        </div>
        <!-- Action Buttons -->
        <div class="dashboard-card p-3 mb-4">
            <div class="row">
                <div class="col-md-8">
                    <button onclick="rebuildIndex()" class="btn btn-primary btn-modern me-2">
                        <i class="fas fa-sync-alt me-1"></i> Rebuild Index
                    </button>
                    <button onclick="autoLinkDocuments()" class="btn btn-success btn-modern me-2">
                        <i class="fas fa-magic me-1"></i> Auto-Link Documents
                    </button>
                    <button onclick="autoLinkWithLearning()" class="btn btn-success btn-modern me-2" style="background: linear-gradient(45deg, #28a745, #20c997); border: none;">
                        <i class="fas fa-brain me-1"></i> Auto-Link with Learning
                    </button>
                    <button onclick="showLearningStats()" class="btn btn-info btn-modern">
                        <i class="fas fa-chart-line me-1"></i> Learning Stats
                    </button>
                    <button onclick="openCorrections()" class="btn btn-warning btn-modern me-2">
                        <i class="fas fa-tools me-1"></i> Fix Auto-Links
                    </button>
                    <button onclick="fixStaleLinks()" class="btn btn-warning btn-modern me-2">
                        <i class="fas fa-wrench me-1"></i> Fix Stale Links
                    </button>
                </div>
                <div class="col-md-6">
                    <button onclick="quickScanIssues()" class="btn btn-outline-warning btn-modern me-2">
                        <i class="fas fa-exclamation-triangle me-1"></i> 
                        <span id="issues-count">Scan Issues</span>
                    </button>
                    <button onclick="openCorrections()" class="btn btn-warning btn-modern">
                        <i class="fas fa-tools me-1"></i> Fix Auto-Links
                    </button>
                </div>
                <div class="col-md-4 text-end">
                    <button class="btn btn-info btn-modern me-2" onclick="exportIndex()">
                        <i class="fas fa-download me-1"></i> Export Index
                    </button>
                    <button class="btn btn-outline-primary btn-modern" onclick="showMandatoryRecords()">
                        <i class="fas fa-clipboard-check me-1"></i> Mandatory Records
                    </button>
                </div>
            </div>
        </div>

        <!-- Document Access Tools -->
        <div class="dashboard-card p-3 mb-4">
            <h6 class="mb-3">
                <i class="fas fa-tools me-2 text-primary"></i>
                Document Access Tools
            </h6>
            <div class="row">
                <div class="col-md-4">
                    <div class="d-flex align-items-center p-2 bg-light rounded">
                        <i class="fas fa-folder-open fa-2x text-primary me-3"></i>
                        <div>
                            <small class="text-muted">Quick Access</small>
                            <br>
                            <strong>Open Documents</strong>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="d-flex align-items-center p-2 bg-light rounded">
                        <i class="fas fa-map-marker-alt fa-2x text-secondary me-3"></i>
                        <div>
                            <small class="text-muted">File Explorer</small>
                            <br>
                            <strong>Show Locations</strong>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="d-flex align-items-center p-2 bg-light rounded">
                        <i class="fas fa-info-circle fa-2x text-info me-3"></i>
                        <div>
                            <small class="text-muted">Metadata</small>
                            <br>
                            <strong>Document Info</strong>
                        </div>
                    </div>
                </div>
            </div>
            <p class="text-muted mt-2 mb-0">
                <small>📂 = Open file | 📍 = Show in explorer | ℹ️ = View metadata</small>
            </p>
        </div>

        <!-- Learning Stats Section -->
        <div id="learning-stats-section" class="dashboard-card p-4 mb-4" style="display: none;">
            <h5>
                <i class="fas fa-brain me-2 text-primary"></i>
                Learning System Statistics
            </h5>
            <div id="learning-stats-content">
                <!-- Content loaded via JavaScript -->
            </div>
        </div>

        <!-- Error Message -->
        <% if (typeof error !== 'undefined' && error) { %>
        <div class="alert alert-warning dashboard-card">
            <i class="fas fa-exclamation-triangle me-2"></i>
            <%= error %>
        </div>
        <% } %>

        <!-- Document Categories -->
        <% if (categories && categories.length > 0) { %>
            <% categories.forEach(function(category) { %>
            <div class="dashboard-card category-card">
                <div class="category-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h5 class="mb-1">
                                <i class="fas fa-folder me-2 text-primary"></i>
                                <%= category.name %>
                            </h5>
                            <small class="text-muted">
                                Type: <%= category.type %> | Level: <%= category.level %>
                                <% if (category.documentId) { %> | Doc ID: <%= category.documentId %><% } %>
                            </small>
                        </div>
                        <div class="text-end">
                            <span class="badge badge-status bg-primary me-1">
                                <%= category.totalDocuments || 0 %> docs
                            </span>
                            <span class="badge badge-status bg-success">
                                <%= category.linkedDocuments || 0 %> linked
                            </span>
                        </div>
                    </div>
                </div>
                
                <div class="category-content">
                    <!-- Child Documents -->
                    <% if (category.children && category.children.length > 0) { %>
                        <div class="p-3">
                            <h6 class="text-muted mb-2">
                                <i class="fas fa-list me-1"></i>Documents in Category:
                            </h6>
                            <div class="row">
                                <% category.children.forEach(function(child, index) { %>
                                <div class="col-md-6 mb-2">
                                    <% 
                                    // Find if this child has an enriched version
                                    const enrichedChild = category.enrichedChildren && category.enrichedChildren.find(ec => ec.name === child);
                                    %>
                                    
                                    <div class="document-item">
                                        <div class="d-flex justify-content-between align-items-start">
                                            <div class="flex-grow-1">
                                                <!-- Document name and indicators -->
                                                <div class="d-flex align-items-center mb-1">
                                                    <% if (enrichedChild && enrichedChild.found) { %>
                                                        <i class="fas fa-file-check text-success me-2"></i>
                                                    <% } else { %>
                                                        <i class="fas fa-file text-muted me-2"></i>
                                                    <% } %>
                                                    <span class="fw-medium"><%= child %></span>
                                                    
                                                    <!-- Learning indicators -->
                                                    <% if (enrichedChild) { %>
                                                        <% if (enrichedChild.autoLinked) { %>
                                                            <span class="learning-indicator ai-linked ms-2">AI Linked</span>
                                                        <% } %>
                                                        <% if (enrichedChild.manuallyLinked) { %>
                                                            <span class="learning-indicator manual-linked ms-2">Manual</span>
                                                        <% } %>
                                                        <% if (enrichedChild.usedLearning) { %>
                                                            <span class="learning-indicator pattern-match ms-2">Pattern</span>
                                                        <% } %>
                                                    <% } %>
                                                </div>
                                                
                                                <!-- File info if linked -->
                                                <% if (enrichedChild && enrichedChild.document) { %>
                                                <div class="text-muted small">
                                                    <i class="fas fa-file-alt me-1"></i>
                                                    File: <%= enrichedChild.document.name %>
                                                    <% if (enrichedChild.linkedAt) { %>
                                                        <span class="ms-2">
                                                            <i class="fas fa-clock me-1"></i>
                                                            Linked: <%= new Date(enrichedChild.linkedAt).toLocaleDateString() %>
                                                        </span>
                                                    <% } %>
                                                </div>
                                                <% } %>
                                            </div>
                                            
                                            <!-- Status and Action Buttons -->
                                            <div class="d-flex align-items-center gap-2">
                                                <!-- Document Access Buttons - Only show if document is linked -->
                                                <% if (enrichedChild && enrichedChild.found && enrichedChild.document) { %>
                                                    <div class="btn-group btn-group-sm" role="group" aria-label="Document actions">
                                                        <button onclick="openDocument('<%= enrichedChild.document.id %>')" 
                                                                class="btn btn-outline-primary" 
                                                                title="Open Document">
                                                            <i class="fas fa-external-link-alt"></i>
                                                        </button>
                                                        <button onclick="showDocumentLocation('<%= enrichedChild.document.id %>')" 
                                                                class="btn btn-outline-secondary" 
                                                                title="Show Location">
                                                            <i class="fas fa-folder-open"></i>
                                                        </button>
                                                        <button onclick="getDocumentInfo('<%= enrichedChild.document.id %>')" 
                                                                class="btn btn-outline-info" 
                                                                title="Document Info">
                                                            <i class="fas fa-info-circle"></i>
                                                        </button>
                                                    </div>
                                                <% } %>
                                                
                                                <!-- Status Badge -->
                                                <% if (enrichedChild && enrichedChild.found) { %>
                                                    <span class="badge bg-success badge-status">Linked</span>
                                                <% } else { %>
                                                    <span class="badge bg-warning badge-status">Missing</span>
                                                <% } %>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <% }); %>
                            </div>
                        </div>
                    <% } else { %>
                        <div class="p-3 text-center text-muted">
                            <i class="fas fa-inbox fa-2x mb-2"></i>
                            <p>No documents in this category</p>
                            <% if (category.documentId) { %>
                                <button onclick="linkCategoryDocument('<%= category.name %>', '<%= category.documentId %>')" 
                                        class="btn btn-sm btn-outline-primary">
                                    <i class="fas fa-link me-1"></i>
                                    Link Category Document
                                </button>
                            <% } %>
                        </div>
                    <% } %>
                </div>
            </div>
            <% }); %>
        <% } else { %>
        <div class="dashboard-card p-4 text-center">
            <i class="fas fa-folder-open fa-3x text-muted mb-3"></i>
            <h4 class="text-muted">No Categories Found</h4>
            <p class="text-muted">Try rebuilding the index or check your data files.</p>
            <button onclick="rebuildIndex()" class="btn btn-primary btn-modern">
                <i class="fas fa-sync-alt me-1"></i> Rebuild Index
            </button>
        </div>
        <% } %>

        <!-- Mandatory Records Section -->
        <div id="mandatory-records-section" class="dashboard-card p-4 mt-4" style="display: none;">
            <h5>
                <i class="fas fa-clipboard-check me-2 text-primary"></i>
                Mandatory Records
            </h5>
            <div id="mandatory-records-content">
                <!-- Content loaded via JavaScript -->
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.4/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/js/ims-index.js"></script>
    <script>
        function rebuildIndex() {
            const btn = event.target;
            const originalText = btn.innerHTML;
            btn.innerHTML = '<span class="spinner-border spinner-border-sm me-1"></span>Rebuilding...';
            btn.disabled = true;
            
            fetch('/api/rebuild-index', { method: 'POST' })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        console.log('Index rebuilt:', data);
                        location.reload();
                    } else {
                        throw new Error(data.message || 'Rebuild failed');
                    }
                })
                .catch(error => {
                    console.error('Rebuild error:', error);
                    alert('Error rebuilding index: ' + error.message);
                })
                .finally(() => {
                    btn.innerHTML = originalText;
                    btn.disabled = false;
                });
        }

        function autoLinkDocumentsWithFiltering() {
        return fetch('/api/auto-link-documents-with-learning', { 
            method: 'POST',
            headers: {
            'Content-Type': 'application/json'
            },
            body: JSON.stringify({ 
            checkRevisions: true,
            excludeContractors: true,
            excludeArchived: true,
            minConfidenceScore: 5  // Only link if confidence is high
            })
        });
        }
        function quickScanIssues() {
        const button = event.target;
        const span = button.querySelector('#issues-count');
        const originalText = span.textContent;
        
        span.textContent = 'Scanning...';
        button.disabled = true;
        
        fetch('/api/scan-suspicious-links')
            .then(response => response.json())
            .then(data => {
            if (data.success) {
                const count = data.suspiciousLinks.length;
                if (count > 0) {
                span.textContent = `${count} Issues Found`;
                button.className = button.className.replace('btn-outline-warning', 'btn-warning');
                
                // Show notification
                showNotification(`Found ${count} suspicious links that need review`, 'warning');
                } else {
                span.textContent = 'No Issues';
                button.className = button.className.replace('btn-outline-warning', 'btn-success');
                showNotification('No suspicious links found!', 'success');
                }
            } else {
                throw new Error(data.message);
            }
            })
            .catch(error => {
            console.error('Quick scan error:', error);
            span.textContent = 'Scan Failed';
            showNotification('Error scanning for issues: ' + error.message, 'error');
            })
            .finally(() => {
            button.disabled = false;
            setTimeout(() => {
                span.textContent = originalText;
                button.className = 'btn btn-outline-warning btn-modern me-2';
            }, 5000);
            });
        }

        function fixStaleLinks() {
            const btn = event.target;
            const originalText = btn.innerHTML;
            btn.innerHTML = '<span class="spinner-border spinner-border-sm me-1"></span>Fixing...';
            btn.disabled = true;
            
            fetch('/api/fix-stale-links', { method: 'POST' })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert(`Fixed! ${data.relinkedCount} relinked, ${data.clearedCount} cleared`);
                        location.reload();
                    } else {
                        alert('Error: ' + data.message);
                    }
                })
                .catch(error => {
                    alert('Error: ' + error.message);
                })
                .finally(() => {
                    btn.innerHTML = originalText;
                    btn.disabled = false;
                });
        }
        function openCorrections() {
        window.location.href = '/ims-corrections';
        }
        
                function autoLinkDocuments() {
                    const btn = event.target;
                    const originalText = btn.innerHTML;
                    btn.innerHTML = '<span class="spinner-border spinner-border-sm me-1"></span>Linking...';
                    btn.disabled = true;
                    
                    fetch('/api/auto-link-documents', { 
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ checkRevisions: true })
                    })
                        .then(response => response.json())
                        .then(data => {
                            console.log('Auto-link result:', data);
                            if (data.success) {
                                alert(`Successfully linked ${data.linked || data.linkedCount || 0} documents!`);
                                location.reload();
                            } else {
                                throw new Error(data.message || 'Auto-linking failed');
                            }
                        })
                        .catch(error => {
                            console.error('Auto-link error:', error);
                            alert('Error auto-linking documents: ' + error.message);
                        })
                        .finally(() => {
                            btn.innerHTML = originalText;
                            btn.disabled = false;
                        });
                }
            
                function openCorrections() {
                    window.location.href = '/ims-corrections';
                }

        function autoLinkWithLearning() {
            const btn = event.target;
            const originalText = btn.innerHTML;
            btn.innerHTML = '<span class="spinner-border spinner-border-sm me-1"></span>Learning & Linking...';
            btn.disabled = true;
            
            console.log('Starting enhanced auto-link with learning...');
            
            fetch('/api/auto-link-documents-with-learning', { 
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ checkRevisions: true })
            })
                .then(response => response.json())
                .then(data => {
                    console.log('Enhanced auto-link result:', data);
                    if (data.success) {
                        const message = `Success! Linked ${data.linked || 0} documents total.\n` +
                                       `${data.learnedMatches || 0} used learned patterns for improved accuracy!`;
                        alert(message);
                        location.reload();
                    } else {
                        throw new Error(data.message || 'Enhanced auto-linking failed');
                    }
                })
                .catch(error => {
                    console.error('Enhanced auto-link error:', error);
                    alert('Error in enhanced auto-linking: ' + error.message);
                })
                .finally(() => {
                    btn.innerHTML = originalText;
                    btn.disabled = false;
                });
        }

        function showLearningStats() {
            const section = document.getElementById('learning-stats-section');
            const content = document.getElementById('learning-stats-content');
            
            if (section.style.display === 'none') {
                content.innerHTML = '<div class="text-center"><span class="spinner-border"></span> Loading learning statistics...</div>';
                section.style.display = 'block';
                
                fetch('/api/learning-stats')
                    .then(response => response.json())
                    .then(data => {
                        console.log('Learning stats:', data);
                        if (data.error) {
                            throw new Error(data.error);
                        }
                        
                        let html = '<div class="row">';
                        
                        html += `
                            <div class="col-md-3">
                                <div class="text-center p-3 bg-light rounded">
                                    <h4 class="text-primary">${data.totalPatterns || 0}</h4>
                                    <small>Learned Patterns</small>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="text-center p-3 bg-light rounded">
                                    <h4 class="text-success">${data.totalCorrections || 0}</h4>
                                    <small>Manual Corrections</small>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="p-3 bg-light rounded">
                                    <h6>Last Updated</h6>
                                    <small>${data.lastUpdated ? new Date(data.lastUpdated).toLocaleString() : 'Never'}</small>
                                </div>
                            </div>
                        `;
                        
                        html += '</div>';
                        
                        if (data.topKeywords && data.topKeywords.length > 0) {
                            html += '<h6 class="mt-3">Top Learning Keywords</h6><div class="row">';
                            data.topKeywords.slice(0, 10).forEach(keyword => {
                                html += `
                                    <div class="col-md-6 mb-1">
                                        <span class="badge bg-info me-2">${keyword.keyword}</span>
                                        <small>Score: ${keyword.score} (${keyword.uses} uses)</small>
                                    </div>
                                `;
                            });
                            html += '</div>';
                        }
                        
                        if (data.recentCorrections && data.recentCorrections.length > 0) {
                            html += '<h6 class="mt-3">Recent Learning Activity</h6>';
                            data.recentCorrections.forEach(correction => {
                                html += `
                                    <div class="document-item rounded mb-1">
                                        <small>
                                            <strong>"${correction.searchTerm}"</strong> → 
                                            <span class="text-success">${correction.foundDocument}</span>
                                            <span class="text-muted">(${new Date(correction.timestamp).toLocaleDateString()})</span>
                                        </small>
                                    </div>
                                `;
                            });
                        }
                        
                        content.innerHTML = html;
                    })
                    .catch(error => {
                        console.error('Learning stats error:', error);
                        content.innerHTML = `<div class="alert alert-warning">Error loading learning statistics: ${error.message}</div>`;
                    });
            } else {
                section.style.display = 'none';
            }
        }
        
        function exportIndex() {
            window.location.href = '/api/export-ims-index';
        }
        
        function showMandatoryRecords() {
            const section = document.getElementById('mandatory-records-section');
            const content = document.getElementById('mandatory-records-content');
            
            if (section.style.display === 'none') {
                content.innerHTML = '<div class="text-center"><span class="spinner-border"></span> Loading...</div>';
                section.style.display = 'block';
                
                fetch('/api/mandatory-records')
                    .then(response => response.json())
                    .then(data => {
                        console.log('Mandatory records data:', data);
                        
                        if (data.success && data.mandatoryRecords) {
                            const records = data.mandatoryRecords;
                            let html = '';
                            
                            Object.keys(records).forEach(recordType => {
                                const record = records[recordType];
                                const linkedCount = record.enrichedDocuments ? 
                                    record.enrichedDocuments.filter(d => d.manuallyLinked || d.autoDetected).length : 0;
                                
                                html += `
                                    <div class="document-item rounded mb-2">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <div>
                                                <i class="fas fa-clipboard-check text-primary me-2"></i>
                                                <strong>${recordType}</strong>
                                                <br><small class="text-muted">${record.description || ''}</small>
                                            </div>
                                            <div class="text-end">
                                                <span class="badge ${linkedCount > 0 ? 'bg-success' : 'bg-warning'}">${linkedCount} linked</span>
                                            </div>
                                        </div>
                                    </div>
                                `;
                            });
                            
                            content.innerHTML = html || '<p class="text-muted">No mandatory records configured.</p>';
                        } else {
                            content.innerHTML = '<p class="text-muted">No mandatory records found.</p>';
                        }
                    })
                    .catch(error => {
                        console.error('Mandatory records error:', error);
                        content.innerHTML = '<p class="text-danger">Error loading mandatory records: ' + error.message + '</p>';
                    });
            } else {
                section.style.display = 'none';
            }
        }

        // ========================================
        // DOCUMENT ACCESS FUNCTIONS
        // ========================================

        function openDocument(documentId) {
            console.log('Opening document:', documentId);
            
            if (!documentId) {
                alert('No document ID provided');
                return;
            }

            fetch(`/open/${documentId}`)
                .then(response => response.json())
                .then(data => {
                    console.log('Open document response:', data);
                    if (data.success) {
                        showNotification('Document opened successfully', 'success');
                    } else {
                        showNotification('Error opening document: ' + data.message, 'error');
                    }
                })
                .catch(error => {
                    console.error('Error opening document:', error);
                    showNotification('Error opening document: ' + error.message, 'error');
                });
        }

        function showDocumentLocation(documentId) {
            console.log('Showing location for document:', documentId);
            
            if (!documentId) {
                alert('No document ID provided');
                return;
            }

            const button = event.target;
            const originalHTML = button.innerHTML;
            button.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
            button.disabled = true;

            fetch(`/api/document/show-location/${documentId}`)
                .then(response => response.json())
                .then(data => {
                    console.log('Show location response:', data);
                    
                    if (data.success) {
                        console.log('✅ File location opened successfully');
                        button.innerHTML = '<i class="fas fa-check text-success"></i>';
                        setTimeout(() => {
                            button.innerHTML = originalHTML;
                            button.disabled = false;
                        }, 1500);
                    } else {
                        console.warn('Show location failed:', data.message);
                        showNotification('Could not open file location: ' + data.message, 'error');
                        button.innerHTML = originalHTML;
                        button.disabled = false;
                    }
                })
                .catch(error => {
                    console.error('Error showing document location:', error);
                    showNotification('Network error opening file location', 'error');
                    button.innerHTML = originalHTML;
                    button.disabled = false;
                });
        }

        function getDocumentInfo(documentId) {
            console.log('Getting info for document:', documentId);
            
            if (!documentId) {
                alert('No document ID provided');
                return;
            }

            fetch(`/api/document/metadata/${documentId}`)
                .then(response => response.json())
                .then(data => {
                    console.log('Document metadata response:', data);
                    if (data.success) {
                        const info = data.metadata;
                        
                        const infoText = `Document Information:
                        
Name: ${info.name}
Size: ${info.size}
Extension: ${info.extension || 'Unknown'}
Modified: ${new Date(info.modified).toLocaleString()}
Created: ${new Date(info.created).toLocaleString()}
Folder: ${info.folder || 'Root'}
File Exists: ${info.fileExists ? 'Yes' : 'No'}
Archived: ${info.isArchived ? 'Yes' : 'No'}
Can Preview: ${info.canPreview ? 'Yes' : 'No'}
Revisions: ${info.revisions ? info.revisions.length : 0}`;

                        alert(infoText);
                    } else {
                        showNotification('Error getting document info: ' + data.message, 'error');
                    }
                })
                .catch(error => {
                    console.error('Error getting document info:', error);
                    showNotification('Error getting document info: ' + error.message, 'error');
                });
        }

        function showNotification(message, type) {
            console.log(`${type.toUpperCase()}: ${message}`);
            
            if (type === 'success') {
                console.log('✅ Success:', message);
            } else if (type === 'error') {
                console.error('❌ Error:', message);
                alert(message);
            }
            
            createTempMessage(message, type);
        }

        function createTempMessage(message, type) {
            const messageDiv = document.createElement('div');
            messageDiv.className = `alert alert-${type === 'success' ? 'success' : 'danger'} position-fixed`;
            messageDiv.style.cssText = `
                top: 20px; 
                right: 20px; 
                z-index: 9999; 
                min-width: 300px;
                animation: slideIn 0.3s ease;
            `;
            messageDiv.innerHTML = `
                <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-triangle'} me-2"></i>
                ${message}
                <button type="button" class="btn-close" onclick="this.parentElement.remove()"></button>
            `;
            
            document.body.appendChild(messageDiv);
            
            setTimeout(() => {
                if (messageDiv.parentElement) {
                    messageDiv.remove();
                }
            }, 5000);
        }

        function linkCategoryDocument(categoryName, documentId) {
            console.log('Linking category document:', categoryName, documentId);
            
            fetch('/api/link-category-document', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    categoryName: categoryName,
                    documentId: documentId
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showNotification('Category document linked successfully', 'success');
                    location.reload();
                } else {
                    showNotification('Error linking category document: ' + data.message, 'error');
                }
            })
            .catch(error => {
                console.error('Error linking category document:', error);
                showNotification('Error linking category document', 'error');
            });
        }

        // Console debugging
        console.log('IMS Index page loaded - Enhanced learning system ready');
        console.log('jQuery loaded:', typeof $ !== 'undefined');
        console.log('Available functions:', {
            rebuildIndex: typeof rebuildIndex,
            autoLinkDocuments: typeof autoLinkDocuments,
            autoLinkWithLearning: typeof autoLinkWithLearning,
            showLearningStats: typeof showLearningStats,
            openDocument: typeof openDocument,
            showDocumentLocation: typeof showDocumentLocation,
            getDocumentInfo: typeof getDocumentInfo
        });
    </script>
</body>
</html>